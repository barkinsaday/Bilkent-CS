###---CS224: Lab02---
###---Barkýn_Saday---
###---18.10.2021---
### DYNAMÝC VERSÝON MENU OF "Lab02.asm"
.data	
	sizeStr: .asciiz "Enter the size of the array: "
	newLine: .asciiz "\n"
	contentStr: .asciiz "\nEnter array contents: "
	gap: .asciiz "\n===============================================================================\n"
	menu: .asciiz "\nChoose your operation (1: Sort, 2:, medianMax, 3:Exit and Print)\n"
.text
main:	
	 # point to address of array
	
	li $v0, 4
	la $a0, sizeStr
	syscall

	li $v0, 5
	syscall # Read integer
	move $s7, $v0 # s7 = array size (number of elements not bit)
	mul $s6, $s7, 4 # s6= array size (as bits), also can be thought as index
	
	li $v0, 9  #allocate memory 
	move $a0, $s6 # memory for the array
	syscall
	move $s0, $v0


	
	jal monitor
	
	move $t2, $v0 # t2: max value
	move $t3, $v1# t1: median value
	
	printerWhile:
		beq $t0, $s6, exit_printerWhile
		
		li $v0, 4
		la $a0, newLine
		syscall # Print empty line
		
		li $v0, 1
		add $t1, $t0, $s0 # adress + index
		lw $a0, ($t1)
		syscall
		
		addi $t0, $t0, 4 # index++
		j printerWhile
		
	exit_printerWhile:
		# contiune...
		
	li $v0, 4
	la $a0, gap
	syscall
	
	li $v0, 1
	move $a0, $t3
	syscall
	
	li $v0, 4
	la $a0, gap
	syscall
	
	li $v0, 1
	move $a0, $t2
	syscall
	
	
	
	# Exit Program
	li $v0, 10
	syscall
	# End of "main"
	
	
	
# Sub functions:	
monitor:
	# sav every s registers and ra
	addi $sp, $sp, -36 
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $s5, 20($sp)
	sw $s6, 24($sp)
	sw $s7, 28($sp)
	sw $ra, 32($sp)
	
	init:
		beq $s1, $s7, exit # s1 is counter
		
		li $v0, 4
		la $a0, contentStr
		syscall
		
		li $v0, 5 # read integer
		syscall
		
		mul $s2, $s1, 4
		add $s3, $s2, $s0
		
		sw $v0, ($s3)
		addi $s1, $s1, 1 # s1 + 4
		
		j init # loop
	exit:
	
	interFace:
		li $v0, 4
		la $a0, menu
		syscall
		
		li $v0, 5
		syscall
		
		beq $v0, 1, menu_Sort
		beq $v0, 2, menu_medianMax
		beq $v0, 3, exit_interFace
		
		menu_Sort:
			move $a0, $s0 # a0 is the argument for other methods ( a0 = s0 (adress of dynamic array) )	
			jal bubbleSort
			j interFace
		
		menu_medianMax:
			move $a0, $s0
			jal medianMax
			move $s2, $v0 # v0 is over-ridden
			j interFace
		
	exit_interFace:
		move $v0, $s2 #v0 returns max
	
	# Store-back every s register and ra
	lw $ra, 32($sp)
	lw $s7, 28($sp)
	lw $s6, 24($sp)
	lw $s5, 20($sp)
	lw $s4, 16($sp)
	lw $s3, 12($sp)
	lw $s2, 8($sp)
	lw $s1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 36
	
	jr $ra
	# End of "monitor"

bubbleSort:
	# s1, s2, s3, s4, s5, s0 will be modifed to we need to store them
	addi $sp, $sp, -32
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $s5, 20($sp)
	sw $s6, 24($sp)
	sw $s7, 28($sp)
	
	li $s0, 0
	li $s1, 0
	addi $s6, $s6, -4
	sortLoop:
		loop1:
			li $s1, 0
			loop2:
			
				beq $s1, $s6, exit_loop2# exit loop2 when we reach the end of the array
				
				#mul $s2, $s1, 4
				add $s7, $s1, $a0
				
				lw $s4, ($s7) 
				
				addi $s7, $s7, 4
				lw $s3, ($s7) 
				addi $s7, $s7, -4
				
				addi $s1, $s1, 4 # s1 + 4
				bgt $s4, $s3, swap # swap numbers if previous number is greater
				
				
				j loop2
					swap:
						add $s5, $zero, $s3 # s5 = s3 temp. (not to lose value of s3)
						
						addi $s7, $s7, 4
						sw $s4, ($s7) # s4 is stored in next index
						addi $s7, $s7, -4
						
						sw $s3, ($s7) # s3 is moved to lower index
						j loop2
						
			exit_loop2:
				beq $s0, $s6, exit_sortLoop
				addi $s0, $s0, 4
				j loop1
		exit_loop1:	
	exit_sortLoop:
	lw $s7, 28($sp)
	lw $s6, 24($sp)
	lw $s5, 20($sp)
	lw $s4, 16($sp)
	lw $s3, 12($sp)
	lw $s2, 8($sp)
	lw $s1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 32
	
	move $v0, $a0
	jr $ra
	# End of "bubbleSort"
medianMax:
	addi $sp, $sp, -32
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $s5, 20($sp)
	sw $s6, 24($sp)
	sw $s7, 28($sp)
		
	getMax: # a0 is the starting adress
		addi $s0, $s6, -4
		add $s0, $s0, $a0 # s0 = last adress
		lw $v0, ($s0) # v0 = max value (last one is max since it is sorted)
				
	getMedian:
		div $s7, $s7, 2 # to check no of elemenets in array (odd or even) 
		mfhi $s7
		beqz $s7, even
		
		odd:
			addi $s0, $s6, -4 
			div $s0, $s0, 2 # s0 = median index (need adress)
			add $s0, $s0, $a0 # got the adress
			lw $v1, ($s0) # v1 = median
			j exit_getMedian
		
		even:
			addi $s0, $s6, -4 #last index
			div $s0, $s0, 2 # middle of two middle indexes
			addi $s0, $s0, 2 # right-mid
			add $s0, $s0, $a0 # get adress
			lw $v1, ($s0) # right value (v1)
			
			addi $s0, $s0, -4 # left-mid index
			lw $s3, ($s0) # left value (s3) temp.
			
			
			add $v1, $v1, $s3 # v1 = v1 + temp
			div $v1, $v1, 2 # v1 = median
	exit_getMedian:	
		lw $s7, 28($sp)
		lw $s6, 24($sp)
		lw $s5, 20($sp)
		lw $s4, 16($sp)
		lw $s3, 12($sp)
		lw $s2, 8($sp)
		lw $s1, 4($sp)
		lw $s0, 0($sp)
		addi $sp, $sp, 32
		
		jr $ra
# End of Program...
